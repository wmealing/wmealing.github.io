#+TITLE: Mirai's Watchdog in rust.
#+ROAM_ALIAS: Mirais watchdog in rust.
#+ROAM_TAGS: watchdog malware rust
#+ROAM_REF:
#+OPTIONS: ^:nil num:nil
#+HTML_HEAD: <link rel="stylesheet" href="tufte.css" type="text/css" />
#+HTML_HEAD_EXTRA: <meta http-equiv="Content-Security-Policy"  content="default-src 'self'; img-src https://*; child-src 'none'; 'unsafe-inline'">


* Disabling the watchdog.

One of the first things that mirai does is disable the watchdog of the
host to ensure that it didnt reboot if the system begins to take too
long.

#+BEGIN_EXAMPLE

    // Prevent watchdog from rebooting device
    if ((wfd = open("/dev/watchdog", 2)) != -1 ||
        (wfd = open("/dev/misc/watchdog", 2)) != -1)
    {
        int one = 1;

        ioctl(wfd, 0x80045704, &one);
        close(wfd);
        wfd = 0;
    }
#+END_EXAMPLE

Lets break that down,

#+BEGIN_EXAMPLE
    if ((wfd = open("/dev/watchdog", 2)) != -1 ||
#+END_EXAMPLE

It opens the watchdog device read/write (#define O_RDWR 00000002).

It issues an 'ioctl' with a magic number.
#+BEGIN_SRC 
        ioctl(wfd, 0x80045704, &one);
#+END_SRC

Then closes the opened file descriptor.

#+BEGIN_SRC 
        close(wfd);
#+END_SRC

While this does adhere to the spec, its also not the most supported
method of disabling the watchdog.

The aptly named "magic close feature" (https://www.kernel.org/doc/Documentation/watchdog/watchdog-api.txt))

#+BEGIN_VERSE


* The magic close feature:

Magic Close feature:

If a driver supports "Magic Close", the driver will not disable the
watchdog unless a specific magic character 'V' has been sent to
/dev/watchdog just before closing the file.  If the userspace daemon
closes the file without sending this special character, the driver
will assume that the daemon (and userspace in general) died, and will
stop pinging the watchdog without disabling it first.  This will then
cause a reboot if the watchdog is not re-opened in sufficient time.

#+END_VERSE

Seems to be more widely supported than the ioctl method. There are
watchdog drivers in the tree that do not support ioctl manipulation,
but instead support the magic close feature.
 
Rust doesn't have a close() function, From the  std::fs::File docs:

#+BEGIN_VERSE
Files are automatically closed when they go out of scope. Errors detected on
closing are ignored by the implementation of Drop. Use the method sync_all if
these errors must be manually handled.
#+END_VERSE

1This would leave us with a simple function li

#+BEGIN_SRC rust
use std::fs;

fn disable_watchodg() -> std::io::Result<()> {
    fs::write("/dev/watchdog", "V")?
}

fn main() {
 disable_watchdog();
}
#+END_SRC

Wild right ?


* Additional resources

[[https://github.com/jgamblin/Mirai-Source-Code][Mirai Source code]]
